p <- plot_ly(palmerpenguins::penguins, x = ~bill_length_mm, y = ~body_mass_g)
p
p <- plot_ly(palmerpenguins::penguins, x = ~bill_length_mm, y = ~body_mass_g)
p
p %>% add_lines(linetype = ~species)
p %>% add_paths(linetype = ~species)
economics %>% plot_ly(x = ~date, y = ~unemploy/pop, z=~pce) %>% add_lines()
# To make code more readable, plotly imports the pipe operator from magrittr
economics %>% plot_ly(x = ~date, y = ~unemploy/pop, z=~pce) %>% add_lines()
# plotly has a functional interface: every plotly function takes a plotly
# object as it's first input argument and returns a modified plotly object
add_lines(plot_ly(economics, x = ~date, y = ~unemploy/pop))
# To make code more readable, plotly imports the pipe operator from magrittr
economics %>% plot_ly(x = ~date, y = ~unemploy/pop, z=~pce) %>% add_lines()
economics %>% plot_ly(x = ~date, y = ~unemploy/pop) %>% add_paths()
# Attributes defined via plot_ly() set 'global' attributes that
# are carried onto subsequent traces, but those may be over-written
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~uempmed,color= I("yellow")) %>%
add_lines(y = ~psavert, color = I("red"))
knitr::opts_chunk$set(echo = TRUE)
##https://www.datanovia.com/en/blog/ggplot-examples-best-reference/
##http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html#Scatterplot
#install.packages("ggplot2")
#install.packages("pheatmap")
library('ggplot2')
library('pheatmap')
library('dplyr')
library('tidyverse')
library("ggpubr")
df <- matrix(rnorm(1000),nrow=100)
View(df)
pheatmap(df)
pheatmap(iris[1:4])
df <- matrix(rnorm(1000),nrow=50)
df <- matrix(rnorm(1000),nrow=13)
df <- matrix(rnorm(1000),nrow=10)
iris <- iris
pheatmap(df)
pheatmap(iris[1:4])
pheatmap(df)
pheatmap(iris[1:4])
View(iris)
iris[,2:3]
iris[,2]
iris[,2] %>%  hist()
boxplot(Petal.Length~Species,data=df)
boxplot(Petal.Length~Species,data=iris)
plot(iris[,2:3] ,
main="The Iris Scatter Plot",
ylab="Sepal Length-test",
xlab="Sepal Width- testing",
cex = 7,
xlim = c(1,6),
ylim = c(1,10)
)
ggplot(mpg, aes(cty, hwy)) +
geom_point(size = 0.5)
# Jittered points
ggplot(mpg, aes(cty, hwy)) +
geom_jitter(size = 0.5, width = 0.5)
ggplot(mpg, aes(cty, hwy)) +
geom_count()
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(bins = 20, fill = "white", color = "black")  +
geom_vline(aes(xintercept = mean(Sepal.Length)), linetype = 2)
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(bins = 20, fill = "white", color = "black")  +
geom_vline(aes(xintercept = mean(Sepal.Length)), linetype = 1)
# Basic histogram with mean line
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(bins = 20, fill = "white", color = "black")  +
geom_vline(aes(xintercept = mean(Sepal.Length)), linetype = 3)
# Basic histogram with mean line
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(bins = 20, fill = "white", color = "black")  +
geom_vline(aes(xintercept = mean(Sepal.Length)), linetype = 1)
# Basic histogram with mean line
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(bins = 50, fill = "white", color = "black")  +
geom_vline(aes(xintercept = mean(Sepal.Length)), linetype = 1)
# Basic histogram with mean line
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(bins = 8, fill = "white", color = "black")  +
geom_vline(aes(xintercept = mean(Sepal.Length)), linetype = 1)
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(aes(fill = Species, color = Species), bins = 20,
position = "identity", alpha = 0.5) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(aes(fill = Species, color = Species), bins = 20,
position = "identity", alpha = 0.8) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(aes(fill = Species, color = Species), bins = 20,
position = "identity", alpha = 0.3) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(aes(fill = Species, color = Species), bins = 20,
position = "identity", alpha = 0.3)
df <- mtcars %>%
rownames_to_column() %>%
as_data_frame() %>%
mutate(cyl = as.factor(cyl)) %>%
select(rowname, wt, mpg, cyl)
# Basic bar plots
ggplot(df, aes(x = rowname, y = mpg)) +
geom_col() +
rotate_x_text(angle = 45)
# Reorder row names by mpg values
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col()  +
rotate_x_text(angle = 45)
mtcars <- mtcars
View(mtcars)
View(df)
str(df)
ggplot(df, aes(x = rowname, y = mpg)) +
geom_col()
ggplot(df, aes(x = rowname, y = mpg)) +
geom_col() +
rotate_x_text(angle = 45)
# Reorder row names by mpg values
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col()  +
rotate_x_text(angle = 45)
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col( aes(fill = cyl))
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col( aes(fill = cyl)) +
geom_text(aes(label = mpg), nudge_y = 2)
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col( aes(fill = cyl)) +
geom_text(aes(label = mpg), nudge_y = 8)
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col( aes(fill = cyl)) +
geom_text(aes(label = mpg), nudge_y = 3)
# Horizontal bar plots,
# change fill color by groups and add text labels
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col( aes(fill = cyl)) +
geom_text(aes(label = mpg), nudge_y = 3) +
coord_flip()
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col( aes(fill = cyl)) +
geom_text(aes(label = mpg), nudge_y = 3) +
coord_flip() +
scale_fill_viridis_d()
# Data
df3 <- data.frame(supp=rep(c("VC", "OJ"), each=3),
dose=rep(c("D0.5", "D1", "D2"),2),
len=c(6.8, 15, 33, 4.2, 10, 29.5))
# Line plot
ggplot(df3, aes(x = dose, y = len, group = supp)) +
geom_line(aes(linetype = supp))
# Line plot with [oint]
ggplot(df3, aes(x = dose, y = len, group = supp)) +
geom_line(aes(linetype = supp)) +
geom_point(aes(shape = supp))
df3 <- data.frame(supp=rep(c("VC", "OJ"), each=3),
dose=rep(c("D0.5", "D1", "D2"),2),
len=c(6.8, 15, 33, 4.2, 10, 29.5))
View(df3)
str(df3)
# Line plot
ggplot(df3, aes(x = dose, y = len, group = supp)) +
geom_line(aes(linetype = supp))
# Line plot with [oint]
ggplot(df3, aes(x = dose, y = len, group = supp)) +
geom_line(aes(linetype = supp)) +
geom_point(aes(shape = supp))
ToothGrowth <- ToothGrowth
View(ToothGrowth)
str(ToothGrowth)
ggplot(ToothGrowth, aes(dose, len)) +
geom_boxplot()
ggplot(ToothGrowth, aes(dose, len)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.2)
g + geom_boxplot(varwidth=T, fill="plum") +
labs(title="Box plot",
subtitle="City Mileage grouped by Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
economics <- economics
View(economics)
# Data preparation
df <- economics %>%
select(date, psavert, uempmed) %>%
gather(key = "variable", value = "value", -date)
View(df)
head(df, 3)
str(head)
str(head)
str(df)
ggplot(df, aes(x = date, y = value)) +
geom_line(aes(color = variable), size = 1)
ggplot(df, aes(x = date, y = value)) +
geom_line(aes(color = variable), size = 1)+
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(df, aes(x = date, y = value)) +
geom_line(aes(color = variable), size = 1)+
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
ggplot(df, aes(x = date, y = value)) +
geom_line(aes(color = variable), size = 1)+
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(df, aes(x = date, y = value)) +
geom_line(aes(color = variable), size = 1)+
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
library(corrplot)
x <- cor(iris[1:4])
corrplot(x, method = "circle")
x <- cor(iris[1:4])
View(x)
corrplot(x, method = "circle")
View(housetasks)
library(PerformanceAnalytics)
chart.Correlation(
iris[1:4],
histogram = TRUE,
method = c("pearson")
)
# install.packages("ggdendro")
library(ggplot2)
library(ggdendro)
theme_set(theme_bw())
hc <- hclust(dist(USArrests), "ave")  # hierarchical clustering
# plot
ggdendrogram(hc, rotate = TRUE, size = 2)
library(FactoMineR)
library(factoextra)
res.pca <- prcomp(iris[, -5],  scale = TRUE)
# Use points only
fviz_pca_ind(res.pca, geom="point")
# Gradient color
fviz_pca_ind(res.pca, col.ind="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.6)
p <- fviz_pca_ind(res.pca, label="none", habillage=iris$Species,
addEllipses=TRUE, ellipse.level=0.95)
print(p)
res.pca <- prcomp(iris[, -5],  scale = TRUE)
View(res.pca)
# Use points only
fviz_pca_ind(res.pca, geom="point")
# Default plot
fviz_pca_var(res.pca)
View(iris)
# Gradient color
fviz_pca_ind(res.pca, col.ind="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.6)
p <- fviz_pca_ind(res.pca, label="none", habillage=iris$Species,
addEllipses=TRUE, ellipse.level=0.95)
print(p)
# Default plot
fviz_pca_var(res.pca)
# Use points and text
fviz_pca_var(res.pca, geom = c("point", "text"))
fviz_pca_biplot(res.pca)
library(plotly)
# plot_ly() tries to create a sensible plot based on the information you
# give it. If you don't provide a trace type, plot_ly() will infer one.
plot_ly(economics, x = ~pop)
plot_ly(economics, x = ~date, y = ~pop)
View(economics)
volcano <- volcano
View(volcano)
# To make code more readable, plotly imports the pipe operator from magrittr
economics %>%
plot_ly(x = ~date, y = ~unemploy/pop, z=~pce) %>%
add_lines()
economics %>% plot_ly(x = ~date, y = ~unemploy/pop) %>% add_paths()
# Attributes defined via plot_ly() set 'global' attributes that
# are carried onto subsequent traces, but those may be over-written
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~uempmed,color= I("yellow")) %>%
add_lines(y = ~psavert, color = I("red"))
# Attributes are documented in the figure reference -> https://plotly.com/r/reference
# You might notice plot_ly() has named arguments that aren't in this figure
# reference. These arguments make it easier to map abstract data values to
# visual attributes.
p <- plot_ly(palmerpenguins::penguins, x = ~bill_length_mm, y = ~body_mass_g)
p
p %>% add_lines(linetype = ~species)
p %>% add_paths(linetype = ~species)
knitr::opts_chunk$set(echo = TRUE)
##https://www.datanovia.com/en/blog/ggplot-examples-best-reference/
##http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html#Scatterplot
#install.packages("ggplot2")
#install.packages("pheatmap")
library('ggplot2')
library('pheatmap')
library('dplyr')
library('tidyverse')
library("ggpubr")
df <- matrix(rnorm(1000),nrow=10)
iris <- iris
pheatmap(df)
pheatmap(iris[1:4])
plot(iris[,2:3])
plot(iris)
hist(iris[,2])
iris[,2] %>%
library(parathyroidSE)
data(parathyroidExonsSE)
cm <- assay(parathyroidExonsSE)[1:5000,1:27]
View(cm)
notexpressed <- apply(cm,1,sum)
hist(notexpressed)
gene <- notexpressed[notexpressed==0]
rownames(cm) <- seq(1,nrow(cm))
View(cm)
notexpressed <- apply(cm,1,sum)
gene <- notexpressed[notexpressed==0]
gene
gene <-as.data.frame(gene)
View(gene)
pheatmap(cm)
pheatmap(log10(cm))
pheatmap(log10(cm+1))
library(gganimate)
#> Loading required package: ggplot2
#gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation.
#It does this by providing a range of new grammar classes that can be added to the plot object
#in order to customise how it should change with time.
#transition_*() defines how the data should be spread out and how it relates to itself across time.
#view_*() defines how the positional scales should change along the animation.
#shadow_*() defines how data from other points in time should be presented in the given point in time.
#enter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.
#ease_aes() defines how different aesthetics should be eased during transitions.
# We'll start with a static plot
p <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point()
#aes(colour = Species), size = 2
plot(p)
#------------------------------------
# 2. transition_states()
#------------------------------------
anim <- p +
transition_states(Species,
transition_length = 2,
state_length = 1)
#states
#   The unquoted name of the column holding the state levels in the data.
#transition_length
#   The relative length of the transition. Will be recycled to match the number of states in the data
#state_length
#   The relative length of the pause at the states. Will be recycled to match the number of states in the data
#--------------------------------------------
# 3. ease_aes(), Control easing of aesthetics
#--------------------------------------------
anim +
ease_aes(y = 'bounce-out') # Sets special ease for y aesthetic
##ease_aes() animation type
#quadratic Models a power-of-2 function
#cubic Models a power-of-3 function
#quartic Models a power-of-4 function
#quintic Models a power-of-5 function
#sine Models a sine function
#circular Models a pi/2 circle arc
#exponential Models an exponential function
#elastic Models an elastic release of energy
#back Models a pullback and relase
#bounce Models the bouncing of a ball
#modifier
#-in The easing function is applied as-is
#-out The easing function is applied in reverse
#-in-out The first half of the transition it is applied as-is, while in the last half it is reversed
anim +
ggtitle('Now showing {closest_state}',
subtitle = 'Frame {frame} of {nframes}')
#-------------------------------------
# 4. Enter and exit animation
#-------------------------------------
#https://rdrr.io/github/thomasp85/gganimate/man/enter_exit.html
anim2 <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point(aes(colour = Species)) +
transition_states(Species,
transition_length = 2,
state_length = 1)
anim2 +
enter_fade() +
exit_shrink()
anim2 +
enter_fade() + enter_drift(x_mod = -1) +
exit_shrink() + exit_drift(x_mod = 5)
library(gganimate)
#> Loading required package: ggplot2
#gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation.
#It does this by providing a range of new grammar classes that can be added to the plot object
#in order to customise how it should change with time.
#transition_*() defines how the data should be spread out and how it relates to itself across time.
#view_*() defines how the positional scales should change along the animation.
#shadow_*() defines how data from other points in time should be presented in the given point in time.
#enter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.
#ease_aes() defines how different aesthetics should be eased during transitions.
# We'll start with a static plot
p <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point()
#aes(colour = Species), size = 2
plot(p)
# We'll start with a static plot
p <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_jitter()
plot(p)
#------------------------------------
# 2. transition_states()
#------------------------------------
anim <- p +
transition_states(Species,
transition_length = 2,
state_length = 1)
#states
#   The unquoted name of the column holding the state levels in the data.
#transition_length
#   The relative length of the transition. Will be recycled to match the number of states in the data
#state_length
#   The relative length of the pause at the states. Will be recycled to match the number of states in the data
#------------------------------------
# 2. transition_states()
#------------------------------------
anim <- p +
transition_states(Species,
transition_length = 2,
state_length = 1)
#states
#   The unquoted name of the column holding the state levels in the data.
#transition_length
#   The relative length of the transition. Will be recycled to match the number of states in the data
#state_length
#   The relative length of the pause at the states. Will be recycled to match the number of states in the data
anim
#--------------------------------------------
# 3. ease_aes(), Control easing of aesthetics
#--------------------------------------------
anim +
ease_aes(y = 'bounce-out') # Sets special ease for y aesthetic
##ease_aes() animation type
#quadratic Models a power-of-2 function
#cubic Models a power-of-3 function
#quartic Models a power-of-4 function
#quintic Models a power-of-5 function
#sine Models a sine function
#circular Models a pi/2 circle arc
#exponential Models an exponential function
#elastic Models an elastic release of energy
#back Models a pullback and relase
#bounce Models the bouncing of a ball
#modifier
#-in The easing function is applied as-is
#-out The easing function is applied in reverse
#-in-out The first half of the transition it is applied as-is, while in the last half it is reversed
anim +
ggtitle('Now showing {closest_state}',
subtitle = 'Frame {frame} of {nframes}')
#-------------------------------------
# 4. Enter and exit animation
#-------------------------------------
#https://rdrr.io/github/thomasp85/gganimate/man/enter_exit.html
anim2 <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point(aes(colour = Species)) +
transition_states(Species,
transition_length = 2,
state_length = 1)
anim2 +
enter_fade() +
exit_shrink()
anim2 +
enter_fade() + enter_drift(x_mod = -1) +
exit_shrink() + exit_drift(x_mod = 5)
#-------------------------------------
# Now lets combined all that we know
#------------------------------------
#Example 1
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
#Example 2
#install.packages("gapminder")
library(gapminder)
ggplot(gapminder,aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")+
transition_time(year) +
labs(title = "Year: {frame_time}")
View(cm)
rownames(cm) <- seq(1,nrow(cm))
notexpressed <- apply(cm,1,sum)
gene <- notexpressed[notexpressed==0]
gene <-as.data.frame(gene)
View(gene)
pheatmap(cm)
No
pheatmap(log10(cm+1))
